name: Build and Publish Gem

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Run Unit and Integration Tests"]
    types:
      - completed
    branches:
      - main
      - cicd

# Grant necessary permissions for the workflow
permissions:
  contents: write    # Required to create tags and releases
  packages: write    # Required for package publishing
  actions: read      # Required to read workflow

jobs:
  build-and-publish:
    # Run if: 1) workflow_dispatch on main/cicd OR 2) workflow_run from successful test on main/cicd  
    if: |
      (github.event_name == 'workflow_dispatch' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/cicd')) ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' && (github.event.workflow_run.head_branch == 'main' || github.event.workflow_run.head_branch == 'cicd'))
    runs-on: ubuntu-latest
    
    steps:      
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.head_branch || github.ref_name }}
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.3'
        bundler-cache: true
        
    - name: Get current version
      id: version
      run: |
        TARGET_VERSION=$(ruby -r './lib/vagrant_ssh_config_manager/version.rb' -e 'puts VagrantPlugins::SshConfigManager::VERSION')
        echo "Using current version: $TARGET_VERSION"
        echo "target_version=$TARGET_VERSION" >> $GITHUB_OUTPUT
        echo "TARGET_VERSION=$TARGET_VERSION" >> $GITHUB_ENV
        
    - name: Check if version already exists
      id: check_existing
      run: |
        # Check if git tag exists
        if git rev-parse "v${{ steps.version.outputs.target_version }}" >/dev/null 2>&1; then
          echo "git_tag_exists=true" >> $GITHUB_OUTPUT
        else
          echo "git_tag_exists=false" >> $GITHUB_OUTPUT
        fi
        
        # Check if gem exists on RubyGems
        echo "Checking if gem version ${{ steps.version.outputs.target_version }} exists on RubyGems..."
        if gem search -e vagrant-ssh-config-manager -v "${{ steps.version.outputs.target_version }}" | grep -q "vagrant-ssh-config-manager (${{ steps.version.outputs.target_version }})"; then
          echo "gem_exists=true" >> $GITHUB_OUTPUT
          echo "Gem version ${{ steps.version.outputs.target_version }} already exists on RubyGems"
        else
          echo "gem_exists=false" >> $GITHUB_OUTPUT
          echo "Gem version ${{ steps.version.outputs.target_version }} does not exist on RubyGems"
        fi
        
    - name: Create git tag
      if: |
        steps.check_existing.outputs.git_tag_exists == 'false' && (
          (github.event_name == 'workflow_run' && github.event.workflow_run.head_branch == 'main') ||
          (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main')
        )
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a "v${{ steps.version.outputs.target_version }}" -m "Release version ${{ steps.version.outputs.target_version }}"
        git push origin "v${{ steps.version.outputs.target_version }}"
        
    - name: Build gem
      run: gem build vagrant-ssh-config-manager.gemspec
        
    - name: Publish to RubyGems  
      if: |
        steps.check_existing.outputs.gem_exists == 'false' && (
          (github.event_name == 'workflow_run' && github.event.workflow_run.head_branch == 'main') ||
          (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main')
        )
      env:
        GEM_HOST_API_KEY: ${{ secrets.RUBYGEMS_API_KEY }}
      run: |
        mkdir -p ~/.gem
        echo ":rubygems_api_key: $GEM_HOST_API_KEY" > ~/.gem/credentials
        chmod 0600 ~/.gem/credentials
        gem push vagrant-ssh-config-manager-${{ steps.version.outputs.target_version }}.gem

    - name: Dry-run publish for cicd branch
      if: |
        steps.check_existing.outputs.gem_exists == 'false' && (
          (github.event_name == 'workflow_run' && github.event.workflow_run.head_branch == 'cicd') ||
          (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/cicd')
        )
      run: |
        echo "::notice::This is a dry-run for cicd branch. Gem would be published with version ${{ steps.version.outputs.target_version }}"
        echo "::notice::Gem file: vagrant-ssh-config-manager-${{ steps.version.outputs.target_version }}.gem"
        ls -la vagrant-ssh-config-manager-*.gem
        
    - name: Create GitHub Release
      if: |
        steps.check_existing.outputs.gem_exists == 'false' && (
          (github.event_name == 'workflow_run' && github.event.workflow_run.head_branch == 'main') ||
          (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main')
        )
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version.outputs.target_version }}
        name: Release v${{ steps.version.outputs.target_version }}
        draft: false
        prerelease: false
        files: vagrant-ssh-config-manager-${{ steps.version.outputs.target_version }}.gem
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Skip publishing - already exists
      if: |
        steps.check_existing.outputs.gem_exists == 'true' && (
          (github.event_name == 'workflow_run' && (github.event.workflow_run.head_branch == 'main' || github.event.workflow_run.head_branch == 'cicd')) ||
          (github.event_name == 'workflow_dispatch' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/cicd'))
        )
      run: |
        echo "::notice::Gem version ${{ steps.version.outputs.target_version }} already exists on RubyGems. Skipping publication."
